#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Task {
public:
    string description;
    bool completed;

    Task(const string& desc) : description(desc), completed(false) {}
};

void addTask(vector<Task>& tasks) {
cout << "Enter the task description: ";
    string description;
    cin.ignore();
    getline(cin, description);
    tasks.emplace_back(description);
    cout << "Task added successfully."<<endl;
}

void viewTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
    cout << "No tasks in the list."<< endl;
        return;
    }

    for (size_t i = 0; i < tasks.size(); ++i) {
    cout << i + 1 << ". [" << (tasks[i].completed ? "X" : " ") << "] " << tasks[i].description << endl;
    }
}

void markTaskCompleted(vector<Task>& tasks) {
cout << "Enter the task number to mark as completed: ";
    size_t taskNumber;
    cin >> taskNumber;

    if (taskNumber == 0 || taskNumber > tasks.size()) {
    cout << "Invalid task number.\n";
    } 
    else {
        tasks[taskNumber - 1].completed = true;
    cout << "Task marked as completed.\n";
    }
}

void removeTask(vector<Task>& tasks) {
cout << "Enter the task number to remove: ";
    size_t taskNumber;
    cin >> taskNumber;

    if (taskNumber == 0 || taskNumber > tasks.size()) {
    cout << "Invalid task number."<<endl;
    } 
    else {
        tasks.erase(tasks.begin() + taskNumber - 1);
    cout << "Task removed successfully."<<endl;
    }
}

int main() {
    vector<Task> tasks;
    int choice;

    do {
        cout << "\nTo-Do List Manager"<<endl;
        cout << "1. Add Task"<<endl;
        cout << "2. View Tasks"<<endl;
        cout << "3. Mark Task as Completed"<<endl;
        cout << "4. Remove Task"<<endl;
        cout << "5. Exit"<<endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Please try again."<<endl;
        }
    } while (choice != 5);

    return 0;
}
